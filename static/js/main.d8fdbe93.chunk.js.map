{"version":3,"sources":["components/app-footer.js","components/counter/overall-clock.js","components/counter/clock.js","components/counter/turn-progress.js","components/counter/turns-drawer.js","components/counter/turns-left.js","components/counter/turns-loader.js","components/counter/counter-page.js","components/finish/finish-page.js","components/set-up/time-picker.js","components/set-up/turns-picker.js","components/set-up/set-up-page.js","App.js","serviceWorker.js","index.js"],"names":["AppFooter","className","href","OverallClock","props","getInitialMinutes","Math","floor","time","getInitialSeconds","useState","minutes","setMinutes","seconds","setSeconds","currentInterval","setCurrentInterval","useEffect","sec","min","interval","setInterval","s","clearInterval","m","startClock","Clock","direction","counterClock","maxMinutes","totalTime","forwardClock","currentTurn","turnFinished","TurnProgress","valueFromBeginning","pastTime","turnTime","progress","value","color","CircularProgress","variant","size","maxTime","TurnsDrawer","turns","slice","map","turn","ListItem","Card","TurnsLeft","turnsCount","TurnsLoader","totalProgressValues","progressValue","index","currentProgressValues","style","width","LinearProgress","key","CounterPage","getTurnsPercentage","turnsTime","currentTimes","forEach","push","newTimes","equalTime","i","getInitialTotalTimes","totalTimes","setTotalTimes","setCurrentTurn","turnsPercentage","setTurnsPercentage","getInitialCurrentProgressValues","setCurrentProgressValues","initialCurrentTotalTime","setInitialCurrentTotalTime","initialTurnMoment","setInitialTurnMoment","newCurrentProgressValues","newTotalTimes","oneSecondPercentage","moment","equalDiscount","reduce","total","actual","setLastTurn","setTimeFinished","nextTurn","newEqualTime","timePassed","diff","length","updateTimes","Button","children","onClick","backToSetup","FinishPage","lastTurn","TimePicker","picker","setPicker","handleTimeChange","e","newTime","target","onTimePicked","contentToRender","TextField","label","type","placeholder","onChange","onTimeChange","InputLabelProps","shrink","renderPicker","Select","onPickerChange","MenuItem","TurnsPicker","addManyTurns","setAddManyTurns","addMany","List","Input","setNewTurn","removeItem","addTurn","SetUpPage","setTime","handleNewTime","setTimeType","startRound","App","timeType","hour","setHour","counter","setCounter","setTurns","timeFinished","newHour","remainingSeconds","newTurns","splice","number","last","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8fdbe93.chunk.js","sourcesContent":["import React from 'react';\nimport './app-footer.css';\n\nfunction AppFooter () {\n    return (\n        <div className={'app-footer'}>\n            Developed by&nbsp;\n            <a href={'https://www.linkedin.com/in/german-agustin-monzon/'}>German A. Monzon</a>\n            . Don't know how to use it? Read the&nbsp;\n            <a href={'https://german969.github.io/dsmt/user-guide.html'}>user guide</a>\n            .\n        </div>\n    );\n}\n\nexport default AppFooter;","import React, { useState, useEffect } from \"react\";\nimport './overall-clock.css';\n\nfunction OverallClock (props) {\n    const getInitialMinutes = () => {\n        return Math.floor(props.time/60);\n    };\n    const getInitialSeconds = () => {\n        return Math.floor(props.time - getInitialMinutes() * 60);\n    };\n\n    const [minutes, setMinutes] = useState(getInitialMinutes());\n    const [seconds, setSeconds] = useState(getInitialSeconds());\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const startClock = () => {\n        let sec = getInitialSeconds();\n        let min = getInitialMinutes();\n\n        const interval = setInterval(() => {\n            if (sec > 0) {\n                setSeconds(s => s - 1 );\n                sec = sec - 1;\n            }\n\n            if (sec === 0) {\n                if (min === 0) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m - 1);\n                    setSeconds(59);\n                    min = min - 1;\n                    sec = 59;\n                }\n            }\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    };\n\n    const restartClock = () => {\n        setMinutes(getInitialMinutes());\n        setSeconds(getInitialSeconds());\n    };\n\n    useEffect(() => {\n        restartClock();\n        startClock();\n    }, []);\n\n    return (\n        <div className={'overall-clock'}>\n            <h2>Remaining time</h2>\n            <h1>{ minutes }:{ seconds < 10 ? `0${ seconds }` : seconds }</h1>\n        </div>\n    );\n}\n\nexport default OverallClock;","import React, { useState, useEffect } from \"react\";\n\nfunction Clock (props) {\n    const getInitialMinutes = () => {\n        return Math.floor(props.time/60);\n    };\n    const getInitialSeconds = () => {\n        return Math.floor(props.time - getInitialMinutes() * 60);\n    };\n\n    const [minutes, setMinutes] = useState(getInitialMinutes());\n    const [seconds, setSeconds] = useState(getInitialSeconds());\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const counterClock = () => {\n        let sec = getInitialSeconds();\n        let min = getInitialMinutes();\n\n        const interval = setInterval(() => {\n            if (sec > 0) {\n                setSeconds(s => s - 1 );\n                sec = sec - 1;\n            }\n\n            if (sec === 0) {\n                if (min === 0) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m - 1);\n                    setSeconds(59);\n                    min = min - 1;\n                    sec = 59;\n                }\n            }\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    };\n\n    const forwardClock = () => {\n        let sec = getInitialSeconds();\n        let min = getInitialMinutes();\n        let maxMinutes = props.totalTime / 60;\n\n        const interval = setInterval(() => {\n            if (sec < 60) {\n                setSeconds(s => s + 1 );\n                sec = sec + 1;\n            }\n\n            if (sec === 0) {\n                if (min === maxMinutes) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m + 1);\n                    setSeconds(0);\n                    min = min - 1;\n                    sec = 0;\n                }\n            }\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    };\n\n    const restartClock = () => {\n        setMinutes(getInitialMinutes());\n        setSeconds(getInitialSeconds());\n    };\n\n    useEffect(() => {\n        restartClock();\n\n        if (props.direction === 'backward') {\n            counterClock();\n        } else {\n            forwardClock()\n        }\n    }, [props.currentTurn, props.turnFinished]);\n\n    return (\n        <div>\n            <h1>{ minutes }:{ seconds < 10 ? `0${ seconds }` : seconds }</h1>\n        </div>\n    );\n}\n\nexport default Clock;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Clock from \"./clock\";\nimport './turn-progress.css';\n\nfunction TurnProgress (props) {\n    const valueFromBeginning = (props.pastTime + props.turnTime) * 100 / props.totalTime;\n    const turnFinished = (props.progress === 100);\n    const value = turnFinished ? valueFromBeginning : 100 - props.progress;\n    const time = turnFinished ? 0 : props.turnTime;\n    const color = turnFinished ? 'secondary' : 'primary';\n    const direction = turnFinished ? 'forward' : 'backward';\n\n    const getCircularProgressProps = () => {\n        return {\n            className: 'turn-progress-bar',\n            variant: 'static',\n            value: value,\n            size: 200,\n            color: color\n        }\n    };\n\n    const getClockProps = () => {\n        return {\n            time: time,\n            currentTurn: props.currentTurn,\n            turnFinished: turnFinished,\n            direction: direction,\n            maxTime: props.totalTime\n        }\n    };\n\n    return (\n        <div className={'turn-progress'}>\n            <h2>Current Turn Time</h2>\n            <CircularProgress {...getCircularProgressProps()} />\n            <div className={'turn-progress-clock'}>\n                <Clock {...getClockProps()} />\n            </div>\n        </div>\n    );\n}\n\nexport default TurnProgress;","import React from \"react\";\nimport './turns-drawer.css';\nimport {Card, ListItem} from \"@material-ui/core\";\n\nfunction TurnsDrawer (props) {\n    const renderNextTurns = () => {\n        const nextTurns = props.turns.slice(props.currentTurn, props.currentTurn + 3);\n\n        return nextTurns.map((turn) => {\n            return (\n                <ListItem className={'turns-drawer-list-item'}>\n                    <Card className={'turns-drawer-card'}>{turn}</Card>\n                </ListItem>\n            );\n        });\n    };\n\n    return (\n        <div className={'turns-drawer-container'}>\n            <h2>Current and Next Turns</h2>\n            {renderNextTurns()}\n        </div>\n    );\n}\n\nexport default TurnsDrawer;","import React from 'react';\nimport './turns-left.css';\n\nfunction TurnsLeft (props) {\n    return (\n        <div className={'turns-left-container'}>\n            <h2>Turns Left</h2>\n            <h1>{props.turnsCount - props.currentTurn - 1}</h1>\n        </div>\n    );\n}\n\nexport default TurnsLeft;","import React, { useState, useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport './turns-loader.css';\n\nfunction TurnsLoader (props) {\n\n    const renderProgressValues = () => {\n        return props.totalProgressValues.map((progressValue, index) => {\n            const color = (\n                (props.currentTurn === index) &&\n                (props.currentProgressValues[index] === 100)) ?\n                'secondary' :\n                'primary';\n\n            return (\n                <div style={{width: progressValue + \"%\"}}>\n                    <LinearProgress\n                        className={'partial-progress'}\n                        key={'progress'+index}\n                        variant=\"determinate\"\n                        value={props.currentProgressValues[index]}\n                        color={color}\n                    />\n                </div>\n            );\n        });\n    };\n\n    /*useEffect(() => {\n        const newProgressValues = [...currentProgressValues];\n\n        const interval = setInterval(() => {\n            newProgressValues[props.currentTurn] = newProgressValues[props.currentTurn] + 1;\n\n            setCurrentProgressValues([...newProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [props.currentTurn]);*/\n\n    return (\n        <div className={'turns-loader'}>\n            {renderProgressValues()}\n        </div>\n    );\n}\n\nfunction getInitialCurrentProgressValues (turns) {\n    const currentTimes = [];\n\n    turns.forEach((turn) => {\n        currentTimes.push(0);\n    });\n\n    return currentTimes;\n}\n\nexport default TurnsLoader;","import React, {useEffect, useState} from 'react';\nimport moment from 'moment';\nimport {Button} from '@material-ui/core';\nimport OverallClock from './overall-clock';\nimport TurnProgress from './turn-progress';\nimport TurnsDrawer from './turns-drawer';\nimport TurnsLeft from './turns-left';\nimport TurnsLoader from './turns-loader';\nimport './counter-page.css';\n\nfunction CounterPage(props) {\n\n    const getInitialTotalTimes = () => {\n        let newTimes = [];\n        const equalTime = props.totalTime / props.turnsCount;\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            newTimes.push(equalTime);\n        }\n\n        return newTimes;\n    };\n\n    const getTurnsPercentage = (turnsTime) => {\n        const currentTimes = [];\n        let progress;\n\n        turnsTime.forEach((turnTime) => {\n            progress = turnTime * 100 / props.totalTime;\n\n            currentTimes.push(progress);\n        });\n\n        return currentTimes;\n    };\n\n    const getInitialCurrentProgressValues = () => {\n        const currentTimes = [];\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            currentTimes.push(0);\n        }\n\n        return currentTimes;\n    };\n\n    // Total time of each turn\n    const [totalTimes, setTotalTimes] = useState(getInitialTotalTimes());\n\n    // Current turn\n    const [currentTurn, setCurrentTurn] = useState(0);\n\n    // Percentage of each turn based on total\n    const [turnsPercentage, setTurnsPercentage] =\n        useState(getTurnsPercentage(totalTimes));\n\n    // tiempo avanzado de cada turno\n    const [currentProgressValues, setCurrentProgressValues] = useState(getInitialCurrentProgressValues());\n\n    // maximum initial turn time\n    const [initialCurrentTotalTime, setInitialCurrentTotalTime] = useState(totalTimes[currentTurn]);\n\n    // current counter interval\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const [initialTurnMoment, setInitialTurnMoment] = useState(null);\n\n    useEffect(() => {\n        const newCurrentProgressValues = [...currentProgressValues];\n        let newTotalTimes = [...totalTimes];\n        const oneSecondPercentage = 100 / totalTimes[currentTurn];\n        setInitialTurnMoment(moment());\n\n        const interval = setInterval(() => {\n            newCurrentProgressValues[currentTurn] = newCurrentProgressValues[currentTurn] + oneSecondPercentage;\n\n            if (newCurrentProgressValues[currentTurn] >= 100) {\n                const equalDiscount = 1 / (props.turnsCount - currentTurn - 1);\n                let timePassed;\n\n                newCurrentProgressValues[currentTurn] = 100;\n\n                newTotalTimes = newTotalTimes.map((totalTime, index) => {\n                    if (index === currentTurn) {\n                        return totalTime + 1;\n                    } else if (index > currentTurn) {\n                        return totalTime - equalDiscount;\n                    } else {\n                        return totalTime;\n                    }\n                });\n\n                timePassed = newCurrentProgressValues.reduce((total, actual, index) => {\n                    return total + (newTotalTimes[index] * (actual / 100));\n                }, 0);\n\n                if (timePassed >= props.totalTime) {\n                    props.setLastTurn(currentTurn);\n                    props.setTimeFinished();\n                } else {\n                    setTotalTimes(newTotalTimes);\n                    setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n                }\n            }\n\n            setCurrentProgressValues([...newCurrentProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [currentTurn]);\n\n    const updateTimes = () => {\n        let newTotalTimes = [...totalTimes];\n        let newEqualTime;\n        let timePassed;\n        let newCurrentProgressValues = [...currentProgressValues];\n\n        newCurrentProgressValues[currentTurn] = 100;\n\n        if (currentProgressValues[currentTurn] < 100) {\n            newTotalTimes[currentTurn] = moment().diff(initialTurnMoment) / 1000;\n\n            timePassed = newTotalTimes.reduce((total, actual, index) => {\n                if (index <= currentTurn) {\n                    return total + actual;\n                } else {\n                    return total;\n                }\n            }, 0);\n\n            newEqualTime = (props.totalTime - timePassed) / (props.turnsCount - currentTurn - 1);\n\n            for (let i = currentTurn + 1; i < totalTimes.length; i++) {\n                newTotalTimes[i] = newEqualTime;\n            }\n\n            setCurrentProgressValues(newCurrentProgressValues);\n            setTotalTimes(newTotalTimes);\n            setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n            setInitialCurrentTotalTime(newTotalTimes[currentTurn + 1]);\n        } else {\n            setCurrentProgressValues(newCurrentProgressValues);\n            setInitialCurrentTotalTime(totalTimes[currentTurn + 1]);\n        }\n    };\n\n    const nextTurn = () => {\n        updateTimes();\n\n        setCurrentTurn(currentTurn + 1);\n\n        if (currentTurn + 1 === props.turnsCount) {\n            props.setTimeFinished();\n        }\n    };\n\n    const getCurrentProgress = () => {\n        return currentProgressValues[currentTurn];\n    };\n\n    const getCurrentTotalTime = () => {\n        return totalTimes[currentTurn];\n    };\n\n    const getPastTime = () => {\n        return totalTimes.reduce((total, actual, index) => {\n            if (index < currentTurn) {\n                return total + actual;\n            } else {\n                return total;\n            }\n        }, 0);\n    };\n\n    const getTurnProgressProps = () => {\n        return {\n            currentTurn: currentTurn,\n            maxTime: initialCurrentTotalTime,\n            pastTime: getPastTime(),\n            progress: getCurrentProgress(),\n            totalTime: props.totalTime,\n            turnTime: getCurrentTotalTime()\n        }\n    };\n\n    const getNextButtonProps = () => {\n        return {\n            children: 'Next',\n            className: 'next-button',\n            color: 'primary',\n            onClick: nextTurn,\n            variant: 'contained'\n        };\n    };\n\n    const getTurnsLoaderProps = () => {\n        return {\n            currentProgressValues: currentProgressValues,\n            currentTurn: currentTurn,\n            totalProgressValues: turnsPercentage,\n            totalTime: props.totalTime,\n            turns: totalTimes\n        };\n    };\n\n    const getBackButtonProps = () => {\n        return {\n            children: 'Back',\n            className: 'back-button',\n            color: 'secondary',\n            onClick: props.backToSetup,\n            variant: 'contained'\n        }\n    };\n\n    return (\n        <div>\n            <TurnsLeft currentTurn={currentTurn} turnsCount={props.turnsCount}/>\n            <OverallClock time={props.totalTime}/>\n            <TurnProgress {...getTurnProgressProps()} />\n            <TurnsDrawer currentTurn={currentTurn} turns={props.turns}/>\n            <Button {...getNextButtonProps()} />\n            <TurnsLoader {...getTurnsLoaderProps()} />\n            <Button {...getBackButtonProps()} />\n        </div>\n    );\n}\n\nexport default CounterPage;","import React from 'react';\nimport './finish-page.css';\nimport {Card, ListItem} from \"@material-ui/core\";\n\nfunction FinishPage (props) {\n    const renderTurnsLeft = () => {\n        const turnsLeft = props.turns.slice(props.lastTurn + 1);\n\n        return turnsLeft.map((turn) => {\n            return (\n                <ListItem className={'finish-page-list-item'}>\n                    <Card className={'finish-page-card'}>{turn}</Card>\n                </ListItem>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1 className={'time-finish-title'}>Time Finished</h1>\n            <h2>Turns not taken</h2>\n            <div className={'turns-not-taken-container'}>\n                {renderTurnsLeft()}\n            </div>\n        </div>\n\n    );\n}\n\nexport default FinishPage;","import React, { useState } from 'react';\nimport { Input, TextField, Select, MenuItem } from '@material-ui/core';\nimport './time-picker.css';\nimport moment from 'moment';\n\nfunction TimePicker (props) {\n    const [picker, setPicker] = useState('minutes');\n\n    const handleTimeChange = (e) => {\n        const newTime = moment(e.target.value, 'hh:mm');\n\n        props.onTimePicked(newTime);\n    };\n\n    const isMinutesPicker = () => {\n        return picker === 'minutes';\n    };\n    const isTimePicker = () => {\n        return picker === 'time';\n    };\n    const renderPicker = () => {\n        let contentToRender = null;\n\n        if (isMinutesPicker()) {\n            contentToRender =\n                <TextField\n                    label={'Duration'}\n                    type={'number'}\n                    className={'time-picker--input-number'}\n                    placeholder={'Minutes'}\n                    onChange={(e)=>{props.onTimeChange(e.target.value)}}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n        } else if (isTimePicker()) {\n            contentToRender =\n                <TextField\n                    type={'time'}\n                    className={'time-picker--input-time'}\n                    onChange={handleTimeChange}\n                    label={'Ending time'}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n\n        }\n\n        return contentToRender\n    };\n\n    const handlePickerChange = (e) => {\n        props.onPickerChange(e.target.value);\n        setPicker(e.target.value);\n    };\n\n    return (\n        <div className={'time-picker--container'}>\n            {renderPicker()}\n            <Select\n                value={picker}\n                onChange={handlePickerChange}\n                className={'time-picker--select'}\n            >\n                <MenuItem value={'minutes'}>Minutes</MenuItem>\n                <MenuItem value={'time'}>Time</MenuItem>\n            </Select>\n        </div>\n    );\n}\n\nexport default TimePicker;","import React, { useState } from \"react\";\nimport {List, ListItem, Button, Input, TextField, Card} from '@material-ui/core';\nimport './turns-picker.css';\n\nfunction TurnsPicker (props) {\n    const [addManyTurns, setAddManyTurns] = useState(null);\n\n    const renderListItems = () => {\n        return props.turns.map((turn, index) =>\n            <ListItem\n                className={'turns-picker-list-item'}\n            >\n                <Card\n                    className={'turns-picker-card'}\n                >\n                    <Input\n                        className={'turns-picker-input'}\n                        onChange={(e)=>{props.setNewTurn(e.target.value, index)}}\n                        value={props.turns[index]}\n                    />\n                    <Button onClick={()=>{props.removeItem(index)}}>X</Button>\n                </Card>\n            </ListItem>\n        );\n    };\n\n    return (\n        <div className={'turns-picker-container'}>\n            <h1>Turns</h1>\n            <TextField\n                type={'number'}\n                value={addManyTurns}\n                onChange={(e)=>{setAddManyTurns(e.target.value)}}\n                className={'turns-picker-input-number'}\n                label={'Add many'}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n            <Button\n                onClick={()=>{props.addMany(addManyTurns)}}\n                className={'turns-picker-accept-button'}\n            >\n                Accept\n            </Button>\n            <List>\n                {renderListItems()}\n                <Button onClick={() => props.addTurn()}>Add</Button>\n            </List>\n        </div>\n    );\n}\n\nexport default TurnsPicker;","import React from \"react\";\nimport TimePicker from \"./time-picker\";\nimport TurnsPicker from \"./turns-picker\";\nimport {Button} from \"@material-ui/core\";\n\nfunction SetUpPage (props) {\n    return (\n        <div>\n            <TimePicker\n                onTimeChange={(time) => {\n                    props.setTime(time*60)\n                }}\n                onTimePicked={props.handleNewTime}\n                onPickerChange={(type)=>{props.setTimeType(type)}}\n            />\n            <TurnsPicker\n                setNewTurn={props.setNewTurn}\n                addTurn={props.addTurn}\n                removeItem={props.removeItem}\n                turns={props.turns}\n                addMany={props.addMany}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'start-button'}\n                onClick={props.startRound}\n            >\n                Start\n            </Button>\n        </div>\n    );\n}\n\nexport default SetUpPage;","import React, {useState} from 'react';\nimport moment from 'moment';\nimport AppFooter from './components/app-footer';\nimport CounterPage from './components/counter/counter-page';\nimport FinishPage from './components/finish/finish-page';\nimport SetUpPage from './components/set-up/set-up-page';\nimport './App.css';\n\nfunction App() {\n    const [timeType, setTimeType] = useState('minutes');\n    const [time, setTime] = useState(0);\n    const [hour, setHour] = useState(null);\n    const [counter, setCounter] = useState(false);\n    const [turns, setTurns] = useState(['']);\n    const [timeFinished, setTimeFinished] = useState(false);\n    const [lastTurn, setLastTurn] = useState(0);\n\n    const handleNewTime = (newHour) => {\n        setHour(newHour);\n    };\n\n    const startRound = () => {\n        if (timeType === 'time') {\n            let remainingSeconds = hour.diff(moment(), 'seconds');\n\n            if (remainingSeconds <= 0) {\n                remainingSeconds = 60 * 60;\n            }\n\n            setTime(remainingSeconds);\n        }\n\n        setCounter(true);\n    };\n\n    const setNewTurn = (value, index) => {\n        let newTurns = [...turns];\n\n        newTurns[index] = value;\n\n        setTurns(newTurns);\n    };\n\n    const addTurn = () => {\n        let newTurns = [...turns];\n\n        newTurns.push('');\n\n        setTurns(newTurns);\n    };\n\n    const removeItem = (index) => {\n        let newTurns = [...turns];\n\n        newTurns.splice(index, 1);\n\n        setTurns(newTurns);\n    };\n\n    const addMany = (number) => {\n        let newTurns = [...turns];\n\n        if (turns.length > number) {\n            newTurns = newTurns.slice(0, number);\n        } else if (turns.length < number) {\n            for (let i = 0; i < number - turns.length; i++) {\n                newTurns.push('');\n            }\n        }\n\n        setTurns(newTurns);\n    };\n\n    const getSetUpPageProps = () => {\n        return {\n            setTime: setTime,\n            setTimeType: setTimeType,\n            turns: turns,\n            addMany: addMany,\n            addTurn: addTurn,\n            handleNewTime: handleNewTime,\n            removeItem: removeItem,\n            setNewTurn: setNewTurn,\n            startRound: startRound\n        }\n    };\n\n    const getCounterPageProps = () => {\n        return {\n            totalTime: time,\n            turnsCount: turns.length,\n            backToSetup: () => setCounter(false),\n            turns: turns,\n            setTimeFinished: () => setTimeFinished(true),\n            setLastTurn: (last) => setLastTurn(last)\n        };\n    };\n\n    const renderPage = () => {\n        let contentToRender;\n\n        if (!counter) {\n            contentToRender = (\n                <SetUpPage {...getSetUpPageProps()} />\n            );\n        } else if (!timeFinished) {\n            contentToRender = (\n                <CounterPage {...getCounterPageProps()} />\n            );\n        } else {\n            contentToRender = (\n                <FinishPage turns={turns} lastTurn={lastTurn} />\n            );\n        }\n\n        return contentToRender;\n    };\n\n    return (\n        <div className=\"App\">\n            {renderPage()}\n            <AppFooter />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}