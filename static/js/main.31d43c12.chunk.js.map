{"version":3,"sources":["components/clock.js","components/turns-loader.js","components/turn-progress.js","components/counter-page.js","components/time-picker.js","components/turns-picker.js","components/set-up-page.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","getInitialMinutes","Math","floor","time","getInitialSeconds","useState","minutes","setMinutes","seconds","setSeconds","currentInterval","setCurrentInterval","useEffect","sec","min","interval","setInterval","s","clearInterval","m","startClock","currentTurn","turnFinished","TurnsLoader","className","totalProgressValues","map","progressValue","index","color","currentProgressValues","style","width","LinearProgress","key","variant","value","TurnProgress","timeToTotal","totalTime","pastTime","maxTime","valueToTotalTime","turnTime","progress","CircularProgress","size","CounterPage","getTurnsPercentage","turnsTime","currentTimes","forEach","push","newTimes","equalTime","turnsCount","i","getInitialTotalTimes","totalTimes","setTotalTimes","setCurrentTurn","turnsPercentage","setTurnsPercentage","getInitialCurrentProgressValues","setCurrentProgressValues","initialCurrentTotalTime","setInitialCurrentTotalTime","initialTurnMoment","setInitialTurnMoment","newCurrentProgressValues","newTotalTimes","oneSecondPercentage","moment","equalDiscount","reduce","total","actual","Button","onClick","newEqualTime","timePassed","diff","length","updateTimes","turns","backToSetup","TimePicker","picker","setPicker","handleTimeChange","e","newTime","target","onTimePicked","contentToRender","Input","type","placeholder","onChange","onTimeChange","TextField","renderPicker","Select","onPickerChange","MenuItem","TurnsPicker","addManyTurns","setAddManyTurns","addMany","List","turn","ListItem","Card","setNewTurn","removeItem","addTurn","SetUpPage","setTime","handleNewTime","setTimeType","startRound","App","timeType","hour","setHour","counter","setCounter","setTurns","newHour","newTurns","splice","number","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31d43c12.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Clock (props) {\n    const getInitialMinutes = () => {\n        return Math.floor(props.time/60);\n    };\n    const getInitialSeconds = () => {\n        return Math.floor(props.time - getInitialMinutes() * 60);\n    };\n\n    const [minutes, setMinutes] = useState(getInitialMinutes());\n    const [seconds, setSeconds] = useState(getInitialSeconds());\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const getActualSeconds = () => {\n        return seconds + minutes * 60;\n    };\n\n    const startClock = () => {\n        let sec = getInitialSeconds();\n        let min = getInitialMinutes();\n\n        const interval = setInterval(() => {\n            if (sec > 0) {\n                setSeconds(s => s - 1 );\n                sec = sec - 1;\n            }\n\n            if (sec === 0) {\n                if (min === 0) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m - 1);\n                    setSeconds(59);\n                    min = min - 1;\n                    sec = 59;\n                }\n            }\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    };\n\n    const restartClock = () => {\n        setMinutes(getInitialMinutes());\n        setSeconds(getInitialSeconds());\n    };\n\n    useEffect(() => {\n        restartClock();\n        startClock();\n    }, [props.currentTurn, props.turnFinished]);\n\n    return (\n        <div>\n            <h1>{ minutes }:{ seconds < 10 ? `0${ seconds }` : seconds }</h1>\n        </div>\n    );\n}\n\nexport default Clock;","import React, { useState, useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport './turns-loader.css';\n\nfunction TurnsLoader (props) {\n\n    const renderProgressValues = () => {\n        return props.totalProgressValues.map((progressValue, index) => {\n            const color = (\n                (props.currentTurn === index) &&\n                (props.currentProgressValues[index] === 100)) ?\n                'secondary' :\n                'primary';\n\n            return (\n                <div style={{width: progressValue + \"%\"}}>\n                    <LinearProgress\n                        className={'partial-progress'}\n                        key={'progress'+index}\n                        variant=\"determinate\"\n                        value={props.currentProgressValues[index]}\n                        color={color}\n                    />\n                </div>\n            );\n        });\n    };\n\n    /*useEffect(() => {\n        const newProgressValues = [...currentProgressValues];\n\n        const interval = setInterval(() => {\n            newProgressValues[props.currentTurn] = newProgressValues[props.currentTurn] + 1;\n\n            setCurrentProgressValues([...newProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [props.currentTurn]);*/\n\n    return (\n        <div className={'turns-loader'}>\n            {renderProgressValues()}\n        </div>\n    );\n}\n\nfunction getInitialCurrentProgressValues (turns) {\n    const currentTimes = [];\n\n    turns.forEach((turn) => {\n        currentTimes.push(0);\n    });\n\n    return currentTimes;\n}\n\nexport default TurnsLoader;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Clock from \"./clock\";\nimport './turn-progress.css';\n\nfunction TurnProgress (props) {\n    const timeToTotal = props.totalTime - (props.pastTime + props.maxTime);\n    const extraPassedTime = props.turnTime - props.maxTime;\n    const valueToTotalTime = extraPassedTime * 100 / timeToTotal;\n\n    const turnFinished = (props.progress === 100);\n\n    const value = turnFinished ? valueToTotalTime : props.progress;\n\n    const time = turnFinished ? timeToTotal : props.turnTime;\n\n\n\n    const color = turnFinished ? 'secondary' : 'primary';\n\n    return (\n        <div className={'turn-progress'}>\n            <CircularProgress\n                className={'turn-progress-bar'}\n                variant=\"static\"\n                value={value}\n                size={200}\n                color={color}\n            />\n            <div className={'turn-progress-clock'}>\n                <Clock\n                    time={time}\n                    currentTurn={props.currentTurn}\n                    turnFinished={turnFinished}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default TurnProgress;","import React, {useEffect, useState} from \"react\";\nimport Clock from \"./clock\";\nimport { Button } from \"@material-ui/core\";\nimport TurnsLoader from \"./turns-loader\";\nimport TurnProgress from \"./turn-progress\";\nimport moment from 'moment';\n\nfunction CounterPage (props) {\n\n    const getInitialTotalTimes = () => {\n        let newTimes = [];\n        const equalTime = props.totalTime / props.turnsCount;\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            newTimes.push(equalTime);\n        }\n\n        return newTimes;\n    };\n\n    const getTurnsPercentage = (turnsTime) => {\n        const currentTimes = [];\n        let progress;\n\n        turnsTime.forEach((turnTime) => {\n            progress = turnTime * 100 / props.totalTime;\n\n            currentTimes.push(progress);\n        });\n\n        return currentTimes;\n    };\n\n    const getInitialCurrentProgressValues = () => {\n        const currentTimes = [];\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            currentTimes.push(0);\n        }\n\n        return currentTimes;\n    };\n\n    // Tiempo total de cada turno\n    const [totalTimes, setTotalTimes] = useState(getInitialTotalTimes());\n\n    // turno actual\n    const [currentTurn, setCurrentTurn] = useState(0);\n\n    // Porcentaje de cada turno en base al total\n    const [turnsPercentage, setTurnsPercentage] =\n        useState(getTurnsPercentage(totalTimes));\n\n    // tiempo avanzado de cada turno\n    const [currentProgressValues, setCurrentProgressValues] = useState(getInitialCurrentProgressValues());\n\n    // tiempo maximo inicial del turno\n    const [initialCurrentTotalTime, setInitialCurrentTotalTime] = useState(totalTimes[currentTurn]);\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const [initialTurnMoment, setInitialTurnMoment] = useState(null);\n\n    useEffect(() => {\n        const newCurrentProgressValues = [...currentProgressValues];\n        let newTotalTimes = [...totalTimes];\n        const oneSecondPercentage = 100 / totalTimes[currentTurn];\n        setInitialTurnMoment(moment());\n\n        const interval = setInterval(() => {\n            newCurrentProgressValues[currentTurn] = newCurrentProgressValues[currentTurn] + oneSecondPercentage;\n\n            if (newCurrentProgressValues[currentTurn] >= 100) {\n                const equalDiscount = 1 / (props.turnsCount - currentTurn - 1);\n\n                newCurrentProgressValues[currentTurn] = 100;\n\n                newTotalTimes = newTotalTimes.map((totalTime, index) => {\n                    if (index === currentTurn) {\n                        return totalTime + 1;\n                    } else if (index > currentTurn) {\n                        return totalTime - equalDiscount;\n                    } else {\n                        return totalTime;\n                    }\n                });\n\n                setTotalTimes(newTotalTimes);\n                setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n            }\n\n            setCurrentProgressValues([...newCurrentProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [currentTurn]);\n\n    const updateTimes = () => {\n        let newTotalTimes = [...totalTimes];\n        let newEqualTime;\n        let timePassed;\n        let newCurrentProgressValues = [...currentProgressValues];\n\n        newCurrentProgressValues[currentTurn] = 100;\n\n        if (currentProgressValues[currentTurn] < 100) {\n            newTotalTimes[currentTurn] = moment().diff(initialTurnMoment) / 1000;\n\n            timePassed = newTotalTimes.reduce((total, actual, index) => {\n                if (index <= currentTurn) {\n                    return total + actual;\n                } else {\n                    return total;\n                }\n            }, 0);\n\n            newEqualTime = (props.totalTime - timePassed) / (props.turnsCount - currentTurn - 1);\n\n            for (let i = currentTurn + 1; i < totalTimes.length; i++) {\n                newTotalTimes[i] = newEqualTime;\n            }\n\n            setCurrentProgressValues(newCurrentProgressValues);\n            setTotalTimes(newTotalTimes);\n            setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n            setInitialCurrentTotalTime(newTotalTimes[currentTurn + 1]);\n        } else {\n            setCurrentProgressValues(newCurrentProgressValues);\n            setInitialCurrentTotalTime(totalTimes[currentTurn + 1]);\n        }\n    };\n\n    const nextTurn = () => {\n        updateTimes();\n\n        setCurrentTurn(currentTurn + 1);\n    };\n\n    const getCurrentProgress = () => {\n        return currentProgressValues[currentTurn];\n    };\n\n    const getCurrentTotalTime = () => {\n        return totalTimes[currentTurn];\n    };\n\n    const getPastTime = () => {\n        return totalTimes.reduce((total, actual, index) => {\n            if (index < currentTurn) {\n                return total + actual;\n            } else {\n                return total;\n            }\n        }, 0);\n    };\n\n    return (\n        <div>\n            {/*<Clock time={props.totalTime}/>*/}\n            <TurnProgress\n                progress={getCurrentProgress()}\n                turnTime={getCurrentTotalTime()}\n                totalTime={props.totalTime}\n                pastTime={getPastTime()}\n                maxTime={initialCurrentTotalTime}\n                currentTurn={currentTurn}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'next-button'}\n                onClick={nextTurn}\n            >\n                Next\n            </Button>\n            <TurnsLoader\n                turns={totalTimes}\n                totalTime={props.totalTime}\n                currentTurn={currentTurn}\n                totalProgressValues={turnsPercentage}\n                currentProgressValues={currentProgressValues}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={'back-button'}\n                onClick={props.backToSetup}\n            >\n                Back\n            </Button>\n        </div>\n    );\n}\n\nexport default CounterPage;","import React, { useState } from 'react';\nimport { Input, TextField, Select, MenuItem } from '@material-ui/core';\nimport './time-picker.css';\nimport moment from 'moment';\n\nfunction TimePicker (props) {\n    const [picker, setPicker] = useState('minutes');\n\n    const handleTimeChange = (e) => {\n        const newTime = moment(e.target.value, 'hh:mm');\n\n        props.onTimePicked(newTime);\n    };\n\n    const isMinutesPicker = () => {\n        return picker === 'minutes';\n    };\n    const isTimePicker = () => {\n        return picker === 'time';\n    };\n    const renderPicker = () => {\n        let contentToRender = null;\n\n        if (isMinutesPicker()) {\n            contentToRender =\n                <Input\n                    type={'number'}\n                    className={'time-picker--input-number'}\n                    placeholder={'Minutes'}\n                    onChange={(e)=>{props.onTimeChange(e.target.value)}}\n                />\n        } else if (isTimePicker()) {\n            contentToRender =\n                <TextField\n                    type={'time'}\n                    className={'time-picker--input-time'}\n                    onChange={handleTimeChange}\n                />\n        }\n\n        return contentToRender\n    };\n\n    const handlePickerChange = (e) => {\n        props.onPickerChange(e.target.value);\n        setPicker(e.target.value);\n    };\n\n    return (\n        <div className={'time-picker--container'}>\n            {renderPicker()}\n            <Select\n                value={picker}\n                onChange={handlePickerChange}\n                className={'time-picker--select'}\n            >\n                <MenuItem value={'minutes'}>Minutes</MenuItem>\n                <MenuItem value={'time'}>Time</MenuItem>\n            </Select>\n        </div>\n    );\n}\n\nexport default TimePicker;","import React, { useState } from \"react\";\nimport {List, ListItem, Button, Input, Card} from '@material-ui/core';\nimport './turns-picker.css';\n\nfunction TurnsPicker (props) {\n    const [addManyTurns, setAddManyTurns] = useState(null);\n\n    const renderListItems = () => {\n        return props.turns.map((turn, index) =>\n            <ListItem\n                className={'turns-picker-list-item'}\n            >\n                <Card\n                    className={'turns-picker-card'}\n                >\n                    <Input\n                        className={'turns-picker-input'}\n                        onChange={(e)=>{props.setNewTurn(e.target.value, index)}}\n                        value={props.turns[index]}\n                    />\n                    <Button onClick={()=>{props.removeItem(index)}}>X</Button>\n                </Card>\n            </ListItem>\n        );\n    };\n\n    return (\n        <div className={'turns-picker-container'}>\n            <h1>Turns</h1>\n            <Input\n                type={'number'}\n                value={addManyTurns}\n                onChange={(e)=>{setAddManyTurns(e.target.value)}}\n                className={'turns-picker-input-number'}\n            />\n            <Button onClick={()=>{props.addMany(addManyTurns)}}>Accept</Button>\n            <List>\n                {renderListItems()}\n                <Button onClick={() => props.addTurn()}>Add</Button>\n            </List>\n        </div>\n    );\n}\n\nexport default TurnsPicker;","import React from \"react\";\nimport TimePicker from \"./time-picker\";\nimport TurnsPicker from \"./turns-picker\";\nimport {Button} from \"@material-ui/core\";\n\nfunction SetUpPage (props) {\n    return (\n        <div>\n            <TimePicker\n                onTimeChange={(time) => {\n                    props.setTime(time*60)\n                }}\n                onTimePicked={props.handleNewTime}\n                onPickerChange={(type)=>{props.setTimeType(type)}}\n            />\n            <TurnsPicker\n                setNewTurn={props.setNewTurn}\n                addTurn={props.addTurn}\n                removeItem={props.removeItem}\n                turns={props.turns}\n                addMany={props.addMany}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'start-button'}\n                onClick={props.startRound}\n            >\n                Start\n            </Button>\n        </div>\n    );\n}\n\nexport default SetUpPage;","import React, {useState} from 'react';\nimport './App.css';\nimport moment from 'moment';\nimport CounterPage from './components/counter-page';\nimport SetUpPage from \"./components/set-up-page\";\n\nfunction App() {\n    const [timeType, setTimeType] = useState('minutes');\n    const [time, setTime] = useState(0);\n    const [hour, setHour] = useState(null);\n    const [counter, setCounter] = useState(false);\n    const [turns, setTurns] = useState(['']);\n\n    const handleNewTime = (newHour) => {\n        setHour(newHour);\n    };\n\n    const startRound = () => {\n        if (timeType === 'time') {\n            setTime(hour.diff(moment(), 'seconds'));\n        }\n\n        setCounter(true);\n    };\n\n    const setNewTurn = (value, index) => {\n        let newTurns = [...turns];\n\n        newTurns[index] = value;\n\n        setTurns(newTurns);\n    };\n\n    const addTurn = () => {\n        let newTurns = [...turns];\n\n        newTurns.push('');\n\n        setTurns(newTurns);\n    };\n\n    const removeItem = (index) => {\n        let newTurns = [...turns];\n\n        newTurns.splice(index, 1);\n\n        setTurns(newTurns);\n    };\n\n    const addMany = (number) => {\n        let newTurns = [...turns];\n\n        if (turns.length > number) {\n            newTurns = newTurns.slice(0, number);\n        } else if (turns.length < number) {\n            for (let i = 0; i < number - turns.length; i++) {\n                newTurns.push('');\n            }\n        }\n\n        setTurns(newTurns);\n    };\n\n    const renderPage = () => {\n        let contentToRender = null;\n\n        if (!counter) {\n            contentToRender = (\n                <SetUpPage\n                    setTime={setTime}\n                    handleNewTime={handleNewTime}\n                    setTimeType={setTimeType}\n                    startRound={startRound}\n                    setNewTurn={setNewTurn}\n                    addTurn={addTurn}\n                    removeItem={removeItem}\n                    turns={turns}\n                    addMany={addMany}\n                />\n            );\n        } else {\n            contentToRender = (\n                <CounterPage\n                    totalTime={time}\n                    turnsCount={turns.length}\n                    backToSetup={()=>setCounter(false)}\n                />\n            );\n        }\n\n        return contentToRender;\n    };\n\n    return (\n        <div className=\"App\">\n            {renderPage()}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}