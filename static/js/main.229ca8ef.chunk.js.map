{"version":3,"sources":["components/clock.js","components/turns-loader.js","components/turn-progress.js","components/counter-page.js","components/time-picker.js","components/turns-picker.js","components/set-up-page.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","getInitialMinutes","Math","floor","time","useState","minutes","setMinutes","seconds","setSeconds","useEffect","sec","min","interval","setInterval","s","clearInterval","m","TurnsLoader","className","totalProgressValues","map","progressValue","index","style","width","LinearProgress","key","variant","value","currentProgressValues","TurnProgress","CircularProgress","progress","size","turnTime","CounterPage","getTurnsPercentage","turnsTime","currentTimes","forEach","totalTime","push","newTimes","equalTime","turnsCount","i","getInitialTotalTimes","totalTimes","setTotalTimes","currentTurn","setCurrentTurn","turnsPercentage","setTurnsPercentage","getInitialCurrentProgressValues","setCurrentProgressValues","currentInterval","setCurrentInterval","initialTurnMoment","setInitialTurnMoment","newCurrentProgressValues","newTotalTimes","oneSecondPercentage","moment","equalDiscount","Button","color","onClick","newEqualTime","timePassed","diff","reduce","total","actual","length","updateTimes","turns","backToSetup","TimePicker","picker","setPicker","handleTimeChange","e","newTime","target","onTimePicked","contentToRender","Input","type","placeholder","onChange","onTimeChange","TextField","renderPicker","Select","onPickerChange","MenuItem","TurnsPicker","addManyTurns","setAddManyTurns","addMany","List","turn","ListItem","Card","setNewTurn","removeItem","addTurn","SetUpPage","setTime","handleNewTime","setTimeType","startRound","App","timeType","hour","setHour","counter","setCounter","setTurns","newHour","newTurns","splice","number","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.229ca8ef.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Clock (props) {\n    const getInitialMinutes = () => {\n        return Math.floor(props.time/60);\n    };\n    const getInitialSeconds = () => {\n        return props.time - getInitialMinutes() * 60;\n    };\n\n    const [minutes, setMinutes] = useState(getInitialMinutes());\n    const [seconds, setSeconds] = useState(getInitialSeconds());\n\n    const getActualSeconds = () => {\n        return seconds + minutes * 60;\n    };\n\n    useEffect(() => {\n        let sec = seconds;\n        let min = minutes;\n\n        const interval = setInterval(() => {\n            if (sec > 0) {\n                setSeconds(s => s - 1 );\n                sec = sec - 1;\n            }\n\n            if (sec === 0) {\n                if (min === 0) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m - 1);\n                    setSeconds(59);\n                    min = min - 1;\n                    sec = 59;\n                }\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div>\n            <h1>{ minutes }:{ seconds < 10 ? `0${ seconds }` : seconds }</h1>\n        </div>\n    );\n}\n\nexport default Clock;","import React, { useState, useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport './turns-loader.css';\n\nfunction TurnsLoader (props) {\n\n    const renderProgressValues = () => {\n        return props.totalProgressValues.map((progressValue, index) => {\n\n            return (\n                <div style={{width: progressValue + \"%\"}}>\n                    <LinearProgress\n                        className={'partial-progress'}\n                        key={'progress'+index}\n                        variant=\"determinate\"\n                        value={props.currentProgressValues[index]}\n                    />\n                </div>\n            );\n        });\n    };\n\n    /*useEffect(() => {\n        const newProgressValues = [...currentProgressValues];\n\n        const interval = setInterval(() => {\n            newProgressValues[props.currentTurn] = newProgressValues[props.currentTurn] + 1;\n\n            setCurrentProgressValues([...newProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [props.currentTurn]);*/\n\n    return (\n        <div className={'turns-loader'}>\n            {renderProgressValues()}\n        </div>\n    );\n}\n\nfunction getInitialCurrentProgressValues (turns) {\n    const currentTimes = [];\n\n    turns.forEach((turn) => {\n        currentTimes.push(0);\n    });\n\n    return currentTimes;\n}\n\nexport default TurnsLoader;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Clock from \"./clock\";\nimport './turn-progress.css';\n\nfunction TurnProgress (props) {\n    return (\n        <div className={'turn-progress'}>\n            <CircularProgress\n                className={'turn-progress-bar'}\n                variant=\"static\"\n                value={props.progress}\n                size={200}\n            />\n            <div className={'turn-progress-clock'}>\n                <Clock time={props.turnTime}/>\n            </div>\n        </div>\n    );\n}\n\nexport default TurnProgress;","import React, {useEffect, useState} from \"react\";\nimport Clock from \"./clock\";\nimport { Button } from \"@material-ui/core\";\nimport TurnsLoader from \"./turns-loader\";\nimport TurnProgress from \"./turn-progress\";\nimport moment from 'moment';\n\nfunction CounterPage (props) {\n\n    const getInitialTotalTimes = () => {\n        let newTimes = [];\n        const equalTime = props.totalTime / props.turnsCount;\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            newTimes.push(equalTime);\n        }\n\n        return newTimes;\n    };\n\n    const getTurnsPercentage = (turnsTime) => {\n        const currentTimes = [];\n        let progress;\n\n        turnsTime.forEach((turnTime) => {\n            progress = turnTime * 100 / props.totalTime;\n\n            currentTimes.push(progress);\n        });\n\n        return currentTimes;\n    };\n\n    const getInitialCurrentProgressValues = () => {\n        const currentTimes = [];\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            currentTimes.push(0);\n        }\n\n        return currentTimes;\n    };\n\n    // Tiempo total de cada turno\n    const [totalTimes, setTotalTimes] = useState(getInitialTotalTimes());\n\n    // turno actual\n    const [currentTurn, setCurrentTurn] = useState(0);\n\n    // Porcentaje de cada turno en base al total\n    const [turnsPercentage, setTurnsPercentage] =\n        useState(getTurnsPercentage(totalTimes));\n\n    // tiempo avanzado de cada turno\n    const [currentProgressValues, setCurrentProgressValues] = useState(getInitialCurrentProgressValues());\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const [initialTurnMoment, setInitialTurnMoment] = useState(null);\n\n    useEffect(() => {\n        const newCurrentProgressValues = [...currentProgressValues];\n        let newTotalTimes = [...totalTimes];\n        const oneSecondPercentage = 100 / totalTimes[currentTurn];\n        setInitialTurnMoment(moment());\n\n        const interval = setInterval(() => {\n            newCurrentProgressValues[currentTurn] = newCurrentProgressValues[currentTurn] + oneSecondPercentage;\n\n            if (newCurrentProgressValues[currentTurn] >= 100) {\n                const equalDiscount = 1 / (props.turnsCount - currentTurn - 1);\n\n                newCurrentProgressValues[currentTurn] = 100;\n\n                newTotalTimes = newTotalTimes.map((totalTime, index) => {\n                    if (index === currentTurn) {\n                        return totalTime + 1;\n                    } else if (index > currentTurn) {\n                        return totalTime - equalDiscount;\n                    } else {\n                        return totalTime;\n                    }\n                });\n\n                setTotalTimes(newTotalTimes);\n                setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n            }\n\n            setCurrentProgressValues([...newCurrentProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [currentTurn]);\n\n    const updateTimes = () => {\n        let newTotalTimes = [...totalTimes];\n        let newEqualTime;\n        let timePassed;\n        let newCurrentProgressValues = [...currentProgressValues];\n\n        newCurrentProgressValues[currentTurn] = 100;\n\n        if (currentProgressValues[currentTurn] < 100) {\n            newTotalTimes[currentTurn] = moment().diff(initialTurnMoment) / 1000;\n\n            timePassed = newTotalTimes.reduce((total, actual, index) => {\n                if (index <= currentTurn) {\n                    return total + actual;\n                } else {\n                    return total;\n                }\n            }, 0);\n\n            newEqualTime = (props.totalTime - timePassed) / (props.turnsCount - currentTurn - 1);\n\n            for (let i = currentTurn + 1; i < totalTimes.length; i++) {\n                newTotalTimes[i] = newEqualTime;\n            }\n\n            setCurrentProgressValues(newCurrentProgressValues);\n            setTotalTimes(newTotalTimes);\n            setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n        } else {\n            setCurrentProgressValues(newCurrentProgressValues);\n        }\n    };\n\n    const nextTurn = () => {\n        updateTimes();\n\n        setCurrentTurn(currentTurn + 1);\n    };\n\n    const getCurrentProgress = () => {\n        return currentProgressValues[currentTurn];\n    };\n\n    const getCurrentTotalTime = () => {\n        return totalTimes[currentTurn];\n    };\n\n    return (\n        <div>\n            <Clock time={props.totalTime}/>\n            <TurnProgress progress={getCurrentProgress()} turnTime={getCurrentTotalTime()} />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'next-button'}\n                onClick={nextTurn}\n            >\n                Next\n            </Button>\n            <TurnsLoader\n                turns={totalTimes}\n                totalTime={props.totalTime}\n                currentTurn={currentTurn}\n                totalProgressValues={turnsPercentage}\n                currentProgressValues={currentProgressValues}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={'back-button'}\n                onClick={props.backToSetup}\n            >\n                Back\n            </Button>\n        </div>\n    );\n}\n\nexport default CounterPage;","import React, { useState } from 'react';\nimport { Input, TextField, Select, MenuItem } from '@material-ui/core';\nimport './time-picker.css';\nimport moment from 'moment';\n\nfunction TimePicker (props) {\n    const [picker, setPicker] = useState('minutes');\n\n    const handleTimeChange = (e) => {\n        const newTime = moment(e.target.value, 'hh:mm');\n\n        props.onTimePicked(newTime);\n    };\n\n    const isMinutesPicker = () => {\n        return picker === 'minutes';\n    };\n    const isTimePicker = () => {\n        return picker === 'time';\n    };\n    const renderPicker = () => {\n        let contentToRender = null;\n\n        if (isMinutesPicker()) {\n            contentToRender =\n                <Input\n                    type={'number'}\n                    className={'time-picker--input-number'}\n                    placeholder={'Minutes'}\n                    onChange={(e)=>{props.onTimeChange(e.target.value)}}\n                />\n        } else if (isTimePicker()) {\n            contentToRender =\n                <TextField\n                    type={'time'}\n                    className={'time-picker--input-time'}\n                    onChange={handleTimeChange}\n                />\n        }\n\n        return contentToRender\n    };\n\n    const handlePickerChange = (e) => {\n        props.onPickerChange(e.target.value);\n        setPicker(e.target.value);\n    };\n\n    return (\n        <div className={'time-picker--container'}>\n            {renderPicker()}\n            <Select\n                value={picker}\n                onChange={handlePickerChange}\n                className={'time-picker--select'}\n            >\n                <MenuItem value={'minutes'}>Minutes</MenuItem>\n                <MenuItem value={'time'}>Time</MenuItem>\n            </Select>\n        </div>\n    );\n}\n\nexport default TimePicker;","import React, { useState } from \"react\";\nimport {List, ListItem, Button, Input, Card} from '@material-ui/core';\nimport './turns-picker.css';\n\nfunction TurnsPicker (props) {\n    const [addManyTurns, setAddManyTurns] = useState(null);\n\n    const renderListItems = () => {\n        return props.turns.map((turn, index) =>\n            <ListItem\n                className={'turns-picker-list-item'}\n            >\n                <Card\n                    className={'turns-picker-card'}\n                >\n                    <Input\n                        className={'turns-picker-input'}\n                        onChange={(e)=>{props.setNewTurn(e.target.value, index)}}\n                        value={props.turns[index]}\n                    />\n                    <Button onClick={()=>{props.removeItem(index)}}>X</Button>\n                </Card>\n            </ListItem>\n        );\n    };\n\n    return (\n        <div className={'turns-picker-container'}>\n            <h1>Turns</h1>\n            <Input\n                type={'number'}\n                value={addManyTurns}\n                onChange={(e)=>{setAddManyTurns(e.target.value)}}\n                className={'turns-picker-input-number'}\n            />\n            <Button onClick={()=>{props.addMany(addManyTurns)}}>Accept</Button>\n            <List>\n                {renderListItems()}\n                <Button onClick={() => props.addTurn()}>Add</Button>\n            </List>\n        </div>\n    );\n}\n\nexport default TurnsPicker;","import React from \"react\";\nimport TimePicker from \"./time-picker\";\nimport TurnsPicker from \"./turns-picker\";\nimport {Button} from \"@material-ui/core\";\n\nfunction SetUpPage (props) {\n    return (\n        <div>\n            <TimePicker\n                onTimeChange={(time) => {\n                    props.setTime(time*60)\n                }}\n                onTimePicked={props.handleNewTime}\n                onPickerChange={(type)=>{props.setTimeType(type)}}\n            />\n            <TurnsPicker\n                setNewTurn={props.setNewTurn}\n                addTurn={props.addTurn}\n                removeItem={props.removeItem}\n                turns={props.turns}\n                addMany={props.addMany}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'start-button'}\n                onClick={props.startRound}\n            >\n                Start\n            </Button>\n        </div>\n    );\n}\n\nexport default SetUpPage;","import React, {useState} from 'react';\nimport './App.css';\nimport moment from 'moment';\nimport CounterPage from './components/counter-page';\nimport SetUpPage from \"./components/set-up-page\";\n\nfunction App() {\n    const [timeType, setTimeType] = useState('minutes');\n    const [time, setTime] = useState(0);\n    const [hour, setHour] = useState(null);\n    const [counter, setCounter] = useState(false);\n    const [turns, setTurns] = useState(['']);\n\n    const handleNewTime = (newHour) => {\n        setHour(newHour);\n    };\n\n    const startRound = () => {\n        if (timeType === 'time') {\n            setTime(hour.diff(moment(), 'seconds'));\n        }\n\n        setCounter(true);\n    };\n\n    const setNewTurn = (value, index) => {\n        let newTurns = [...turns];\n\n        newTurns[index] = value;\n\n        setTurns(newTurns);\n    };\n\n    const addTurn = () => {\n        let newTurns = [...turns];\n\n        newTurns.push('');\n\n        setTurns(newTurns);\n    };\n\n    const removeItem = (index) => {\n        let newTurns = [...turns];\n\n        newTurns.splice(index, 1);\n\n        setTurns(newTurns);\n    };\n\n    const addMany = (number) => {\n        let newTurns = [...turns];\n\n        if (turns.length > number) {\n            newTurns = newTurns.slice(0, number);\n        } else if (turns.length < number) {\n            for (let i = 0; i < number - turns.length; i++) {\n                newTurns.push('');\n            }\n        }\n\n        setTurns(newTurns);\n    };\n\n    const renderPage = () => {\n        let contentToRender = null;\n\n        if (!counter) {\n            contentToRender = (\n                <SetUpPage\n                    setTime={setTime}\n                    handleNewTime={handleNewTime}\n                    setTimeType={setTimeType}\n                    startRound={startRound}\n                    setNewTurn={setNewTurn}\n                    addTurn={addTurn}\n                    removeItem={removeItem}\n                    turns={turns}\n                    addMany={addMany}\n                />\n            );\n        } else {\n            contentToRender = (\n                <CounterPage\n                    totalTime={time}\n                    turnsCount={turns.length}\n                    backToSetup={()=>setCounter(false)}\n                />\n            );\n        }\n\n        return contentToRender;\n    };\n\n    return (\n        <div className=\"App\">\n            {renderPage()}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}