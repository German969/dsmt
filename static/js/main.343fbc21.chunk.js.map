{"version":3,"sources":["components/counter/clock.js","components/counter/turns-loader.js","components/counter/turn-progress.js","components/counter/turns-drawer.js","components/counter/turns-left.js","components/counter/counter-page.js","components/set-up/time-picker.js","components/set-up/turns-picker.js","components/set-up/set-up-page.js","components/finish/finish-page.js","components/app-footer.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","getInitialMinutes","Math","floor","time","getInitialSeconds","useState","minutes","setMinutes","seconds","setSeconds","currentInterval","setCurrentInterval","useEffect","sec","min","interval","setInterval","s","clearInterval","m","startClock","currentTurn","turnFinished","TurnsLoader","className","totalProgressValues","map","progressValue","index","color","currentProgressValues","style","width","LinearProgress","key","variant","value","TurnProgress","timeToTotal","totalTime","pastTime","maxTime","valueToTotalTime","turnTime","progress","CircularProgress","size","TurnsDrawer","turns","slice","turn","ListItem","Card","TurnsLeft","turnsCount","CounterPage","getTurnsPercentage","turnsTime","currentTimes","forEach","push","newTimes","equalTime","i","getInitialTotalTimes","totalTimes","setTotalTimes","setCurrentTurn","turnsPercentage","setTurnsPercentage","getInitialCurrentProgressValues","setCurrentProgressValues","initialCurrentTotalTime","setInitialCurrentTotalTime","initialTurnMoment","setInitialTurnMoment","newCurrentProgressValues","newTotalTimes","oneSecondPercentage","moment","equalDiscount","reduce","total","actual","setLastTurn","setTimeFinished","Button","onClick","newEqualTime","timePassed","diff","length","updateTimes","backToSetup","TimePicker","picker","setPicker","handleTimeChange","e","newTime","target","onTimePicked","contentToRender","Input","type","placeholder","onChange","onTimeChange","TextField","renderPicker","Select","onPickerChange","MenuItem","TurnsPicker","addManyTurns","setAddManyTurns","addMany","List","setNewTurn","removeItem","addTurn","SetUpPage","setTime","handleNewTime","setTimeType","startRound","FinishPage","lastTurn","AppFooter","href","App","timeType","hour","setHour","counter","setCounter","setTurns","timeFinished","newHour","newTurns","splice","number","last","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343fbc21.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Clock (props) {\n    const getInitialMinutes = () => {\n        return Math.floor(props.time/60);\n    };\n    const getInitialSeconds = () => {\n        return Math.floor(props.time - getInitialMinutes() * 60);\n    };\n\n    const [minutes, setMinutes] = useState(getInitialMinutes());\n    const [seconds, setSeconds] = useState(getInitialSeconds());\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const getActualSeconds = () => {\n        return seconds + minutes * 60;\n    };\n\n    const startClock = () => {\n        let sec = getInitialSeconds();\n        let min = getInitialMinutes();\n\n        const interval = setInterval(() => {\n            if (sec > 0) {\n                setSeconds(s => s - 1 );\n                sec = sec - 1;\n            }\n\n            if (sec === 0) {\n                if (min === 0) {\n                    clearInterval(interval)\n                } else {\n                    setMinutes(m => m - 1);\n                    setSeconds(59);\n                    min = min - 1;\n                    sec = 59;\n                }\n            }\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    };\n\n    const restartClock = () => {\n        setMinutes(getInitialMinutes());\n        setSeconds(getInitialSeconds());\n    };\n\n    useEffect(() => {\n        restartClock();\n        startClock();\n    }, [props.currentTurn, props.turnFinished]);\n\n    return (\n        <div>\n            <h1>{ minutes }:{ seconds < 10 ? `0${ seconds }` : seconds }</h1>\n        </div>\n    );\n}\n\nexport default Clock;","import React, { useState, useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport './turns-loader.css';\n\nfunction TurnsLoader (props) {\n\n    const renderProgressValues = () => {\n        return props.totalProgressValues.map((progressValue, index) => {\n            const color = (\n                (props.currentTurn === index) &&\n                (props.currentProgressValues[index] === 100)) ?\n                'secondary' :\n                'primary';\n\n            return (\n                <div style={{width: progressValue + \"%\"}}>\n                    <LinearProgress\n                        className={'partial-progress'}\n                        key={'progress'+index}\n                        variant=\"determinate\"\n                        value={props.currentProgressValues[index]}\n                        color={color}\n                    />\n                </div>\n            );\n        });\n    };\n\n    /*useEffect(() => {\n        const newProgressValues = [...currentProgressValues];\n\n        const interval = setInterval(() => {\n            newProgressValues[props.currentTurn] = newProgressValues[props.currentTurn] + 1;\n\n            setCurrentProgressValues([...newProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [props.currentTurn]);*/\n\n    return (\n        <div className={'turns-loader'}>\n            {renderProgressValues()}\n        </div>\n    );\n}\n\nfunction getInitialCurrentProgressValues (turns) {\n    const currentTimes = [];\n\n    turns.forEach((turn) => {\n        currentTimes.push(0);\n    });\n\n    return currentTimes;\n}\n\nexport default TurnsLoader;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Clock from \"./clock\";\nimport './turn-progress.css';\n\nfunction TurnProgress (props) {\n    const timeToTotal = props.totalTime - (props.pastTime + props.maxTime);\n    const extraPassedTime = props.turnTime - props.maxTime;\n    const valueToTotalTime = extraPassedTime * 100 / timeToTotal;\n\n    const turnFinished = (props.progress === 100);\n\n    const value = turnFinished ? valueToTotalTime : props.progress;\n\n    const time = turnFinished ? timeToTotal : props.turnTime;\n\n\n\n    const color = turnFinished ? 'secondary' : 'primary';\n\n    return (\n        <div className={'turn-progress'}>\n            <CircularProgress\n                className={'turn-progress-bar'}\n                variant=\"static\"\n                value={value}\n                size={200}\n                color={color}\n            />\n            <div className={'turn-progress-clock'}>\n                <Clock\n                    time={time}\n                    currentTurn={props.currentTurn}\n                    turnFinished={turnFinished}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default TurnProgress;","import React from \"react\";\nimport './turns-drawer.css';\nimport {Card, ListItem} from \"@material-ui/core\";\n\nfunction TurnsDrawer (props) {\n    const renderNextTurns = () => {\n        const nextTurns = props.turns.slice(props.currentTurn, props.currentTurn + 3);\n\n        return nextTurns.map((turn) => {\n            return (\n                <ListItem className={'turns-drawer-list-item'}>\n                    <Card className={'turns-drawer-card'}>{turn}</Card>\n                </ListItem>\n            );\n        });\n    };\n\n    return (\n        <div className={'turns-drawer-container'}>\n            <h2>Actual and Next Turns</h2>\n            {renderNextTurns()}\n        </div>\n    );\n}\n\nexport default TurnsDrawer;","import React from 'react';\nimport './turns-left.css';\n\nfunction TurnsLeft (props) {\n    return (\n        <div className={'turns-left-container'}>\n            <h2>Turns Left</h2>\n            <h2>{props.turnsCount - props.currentTurn - 1}</h2>\n        </div>\n    );\n}\n\nexport default TurnsLeft;","import React, {useEffect, useState} from \"react\";\nimport Clock from \"./clock\";\nimport {Button} from \"@material-ui/core\";\nimport TurnsLoader from \"./turns-loader\";\nimport TurnProgress from \"./turn-progress\";\nimport TurnsDrawer from './turns-drawer';\nimport TurnsLeft from './turns-left';\nimport moment from 'moment';\nimport './counter-page.css';\n\nfunction CounterPage(props) {\n\n    const getInitialTotalTimes = () => {\n        let newTimes = [];\n        const equalTime = props.totalTime / props.turnsCount;\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            newTimes.push(equalTime);\n        }\n\n        return newTimes;\n    };\n\n    const getTurnsPercentage = (turnsTime) => {\n        const currentTimes = [];\n        let progress;\n\n        turnsTime.forEach((turnTime) => {\n            progress = turnTime * 100 / props.totalTime;\n\n            currentTimes.push(progress);\n        });\n\n        return currentTimes;\n    };\n\n    const getInitialCurrentProgressValues = () => {\n        const currentTimes = [];\n\n        for (let i = 0; i < props.turnsCount; i++) {\n            currentTimes.push(0);\n        }\n\n        return currentTimes;\n    };\n\n    // Tiempo total de cada turno\n    const [totalTimes, setTotalTimes] = useState(getInitialTotalTimes());\n\n    // turno actual\n    const [currentTurn, setCurrentTurn] = useState(0);\n\n    // Porcentaje de cada turno en base al total\n    const [turnsPercentage, setTurnsPercentage] =\n        useState(getTurnsPercentage(totalTimes));\n\n    // tiempo avanzado de cada turno\n    const [currentProgressValues, setCurrentProgressValues] = useState(getInitialCurrentProgressValues());\n\n    // tiempo maximo inicial del turno\n    const [initialCurrentTotalTime, setInitialCurrentTotalTime] = useState(totalTimes[currentTurn]);\n\n    // intervalo del contador actual\n    const [currentInterval, setCurrentInterval] = useState(null);\n\n    const [initialTurnMoment, setInitialTurnMoment] = useState(null);\n\n    useEffect(() => {\n        const newCurrentProgressValues = [...currentProgressValues];\n        let newTotalTimes = [...totalTimes];\n        const oneSecondPercentage = 100 / totalTimes[currentTurn];\n        setInitialTurnMoment(moment());\n\n        const interval = setInterval(() => {\n            newCurrentProgressValues[currentTurn] = newCurrentProgressValues[currentTurn] + oneSecondPercentage;\n\n            if (newCurrentProgressValues[currentTurn] >= 100) {\n                const equalDiscount = 1 / (props.turnsCount - currentTurn - 1);\n                let timePassed;\n\n                newCurrentProgressValues[currentTurn] = 100;\n\n                newTotalTimes = newTotalTimes.map((totalTime, index) => {\n                    if (index === currentTurn) {\n                        return totalTime + 1;\n                    } else if (index > currentTurn) {\n                        return totalTime - equalDiscount;\n                    } else {\n                        return totalTime;\n                    }\n                });\n\n                timePassed = newCurrentProgressValues.reduce((total, actual, index) => {\n                    return total + (newTotalTimes[index] * (actual / 100));\n                }, 0);\n\n                if (timePassed >= props.totalTime) {\n                    props.setLastTurn(currentTurn);\n                    props.setTimeFinished();\n                } else {\n                    setTotalTimes(newTotalTimes);\n                    setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n                }\n            }\n\n            setCurrentProgressValues([...newCurrentProgressValues]);\n        }, 1000);\n\n        if (currentInterval) clearInterval(currentInterval);\n\n        setCurrentInterval(interval);\n    }, [currentTurn]);\n\n    const updateTimes = () => {\n        let newTotalTimes = [...totalTimes];\n        let newEqualTime;\n        let timePassed;\n        let newCurrentProgressValues = [...currentProgressValues];\n\n        newCurrentProgressValues[currentTurn] = 100;\n\n        if (currentProgressValues[currentTurn] < 100) {\n            newTotalTimes[currentTurn] = moment().diff(initialTurnMoment) / 1000;\n\n            timePassed = newTotalTimes.reduce((total, actual, index) => {\n                if (index <= currentTurn) {\n                    return total + actual;\n                } else {\n                    return total;\n                }\n            }, 0);\n\n            newEqualTime = (props.totalTime - timePassed) / (props.turnsCount - currentTurn - 1);\n\n            for (let i = currentTurn + 1; i < totalTimes.length; i++) {\n                newTotalTimes[i] = newEqualTime;\n            }\n\n            setCurrentProgressValues(newCurrentProgressValues);\n            setTotalTimes(newTotalTimes);\n            setTurnsPercentage(getTurnsPercentage(newTotalTimes));\n            setInitialCurrentTotalTime(newTotalTimes[currentTurn + 1]);\n        } else {\n            setCurrentProgressValues(newCurrentProgressValues);\n            setInitialCurrentTotalTime(totalTimes[currentTurn + 1]);\n        }\n    };\n\n    const nextTurn = () => {\n        updateTimes();\n\n        setCurrentTurn(currentTurn + 1);\n\n        if (currentTurn + 1 === props.turnsCount) {\n            props.setTimeFinished();\n        }\n    };\n\n    const getCurrentProgress = () => {\n        return currentProgressValues[currentTurn];\n    };\n\n    const getCurrentTotalTime = () => {\n        return totalTimes[currentTurn];\n    };\n\n    const getPastTime = () => {\n        return totalTimes.reduce((total, actual, index) => {\n            if (index < currentTurn) {\n                return total + actual;\n            } else {\n                return total;\n            }\n        }, 0);\n    };\n\n    return (\n        <div>\n            {/*<Clock time={props.totalTime}/>*/}\n            <TurnsLeft currentTurn={currentTurn} turnsCount={props.turnsCount}/>\n            <TurnProgress\n                progress={getCurrentProgress()}\n                turnTime={getCurrentTotalTime()}\n                totalTime={props.totalTime}\n                pastTime={getPastTime()}\n                maxTime={initialCurrentTotalTime}\n                currentTurn={currentTurn}\n            />\n            <TurnsDrawer currentTurn={currentTurn} turns={props.turns}/>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'next-button'}\n                onClick={nextTurn}\n            >\n                Next\n            </Button>\n            <TurnsLoader\n                turns={totalTimes}\n                totalTime={props.totalTime}\n                currentTurn={currentTurn}\n                totalProgressValues={turnsPercentage}\n                currentProgressValues={currentProgressValues}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={'back-button'}\n                onClick={props.backToSetup}\n            >\n                Back\n            </Button>\n        </div>\n    );\n}\n\nexport default CounterPage;","import React, { useState } from 'react';\nimport { Input, TextField, Select, MenuItem } from '@material-ui/core';\nimport './time-picker.css';\nimport moment from 'moment';\n\nfunction TimePicker (props) {\n    const [picker, setPicker] = useState('minutes');\n\n    const handleTimeChange = (e) => {\n        const newTime = moment(e.target.value, 'hh:mm');\n\n        props.onTimePicked(newTime);\n    };\n\n    const isMinutesPicker = () => {\n        return picker === 'minutes';\n    };\n    const isTimePicker = () => {\n        return picker === 'time';\n    };\n    const renderPicker = () => {\n        let contentToRender = null;\n\n        if (isMinutesPicker()) {\n            contentToRender =\n                <Input\n                    type={'number'}\n                    className={'time-picker--input-number'}\n                    placeholder={'Minutes'}\n                    onChange={(e)=>{props.onTimeChange(e.target.value)}}\n                />\n        } else if (isTimePicker()) {\n            contentToRender =\n                <TextField\n                    type={'time'}\n                    className={'time-picker--input-time'}\n                    onChange={handleTimeChange}\n                />\n        }\n\n        return contentToRender\n    };\n\n    const handlePickerChange = (e) => {\n        props.onPickerChange(e.target.value);\n        setPicker(e.target.value);\n    };\n\n    return (\n        <div className={'time-picker--container'}>\n            {renderPicker()}\n            <Select\n                value={picker}\n                onChange={handlePickerChange}\n                className={'time-picker--select'}\n            >\n                <MenuItem value={'minutes'}>Minutes</MenuItem>\n                <MenuItem value={'time'}>Time</MenuItem>\n            </Select>\n        </div>\n    );\n}\n\nexport default TimePicker;","import React, { useState } from \"react\";\nimport {List, ListItem, Button, Input, Card} from '@material-ui/core';\nimport './turns-picker.css';\n\nfunction TurnsPicker (props) {\n    const [addManyTurns, setAddManyTurns] = useState(null);\n\n    const renderListItems = () => {\n        return props.turns.map((turn, index) =>\n            <ListItem\n                className={'turns-picker-list-item'}\n            >\n                <Card\n                    className={'turns-picker-card'}\n                >\n                    <Input\n                        className={'turns-picker-input'}\n                        onChange={(e)=>{props.setNewTurn(e.target.value, index)}}\n                        value={props.turns[index]}\n                    />\n                    <Button onClick={()=>{props.removeItem(index)}}>X</Button>\n                </Card>\n            </ListItem>\n        );\n    };\n\n    return (\n        <div className={'turns-picker-container'}>\n            <h1>Turns</h1>\n            <Input\n                type={'number'}\n                value={addManyTurns}\n                onChange={(e)=>{setAddManyTurns(e.target.value)}}\n                className={'turns-picker-input-number'}\n            />\n            <Button onClick={()=>{props.addMany(addManyTurns)}}>Accept</Button>\n            <List>\n                {renderListItems()}\n                <Button onClick={() => props.addTurn()}>Add</Button>\n            </List>\n        </div>\n    );\n}\n\nexport default TurnsPicker;","import React from \"react\";\nimport TimePicker from \"./time-picker\";\nimport TurnsPicker from \"./turns-picker\";\nimport {Button} from \"@material-ui/core\";\n\nfunction SetUpPage (props) {\n    return (\n        <div>\n            <TimePicker\n                onTimeChange={(time) => {\n                    props.setTime(time*60)\n                }}\n                onTimePicked={props.handleNewTime}\n                onPickerChange={(type)=>{props.setTimeType(type)}}\n            />\n            <TurnsPicker\n                setNewTurn={props.setNewTurn}\n                addTurn={props.addTurn}\n                removeItem={props.removeItem}\n                turns={props.turns}\n                addMany={props.addMany}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={'start-button'}\n                onClick={props.startRound}\n            >\n                Start\n            </Button>\n        </div>\n    );\n}\n\nexport default SetUpPage;","import React from 'react';\nimport './finish-page.css';\nimport {Card, ListItem} from \"@material-ui/core\";\n\nfunction FinishPage (props) {\n    const renderTurnsLeft = () => {\n        const turnsLeft = props.turns.slice(props.lastTurn + 1);\n\n        return turnsLeft.map((turn) => {\n            return (\n                <ListItem className={'finish-page-list-item'}>\n                    <Card className={'finish-page-card'}>{turn}</Card>\n                </ListItem>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1 className={'time-finish-title'}>Time Finished</h1>\n            <h2>Turns not taken</h2>\n            <div className={'turns-not-taken-container'}>\n                {renderTurnsLeft()}\n            </div>\n        </div>\n\n    );\n}\n\nexport default FinishPage;","import React from 'react';\nimport './app-footer.css';\n\nfunction AppFooter () {\n    return (\n        <div className={'app-footer'}>\n            Developed by&nbsp;\n            <a href={'https://www.linkedin.com/in/german-agustin-monzon/'}>German A. Monzon</a>\n            . Don't know how to use it? Read the&nbsp;\n            <a href={'https://german969.github.com/user-guide.md'}>user guide</a>\n            .\n        </div>\n    );\n}\n\nexport default AppFooter;","import React, {useState} from 'react';\nimport './App.css';\nimport moment from 'moment';\nimport CounterPage from './components/counter/counter-page';\nimport SetUpPage from \"./components/set-up/set-up-page\";\nimport FinishPage from \"./components/finish/finish-page\";\nimport AppFooter from \"./components/app-footer\";\n\nfunction App() {\n    const [timeType, setTimeType] = useState('minutes');\n    const [time, setTime] = useState(0);\n    const [hour, setHour] = useState(null);\n    const [counter, setCounter] = useState(false);\n    const [turns, setTurns] = useState(['']);\n    const [timeFinished, setTimeFinished] = useState(false);\n    const [lastTurn, setLastTurn] = useState(0);\n\n    const handleNewTime = (newHour) => {\n        setHour(newHour);\n    };\n\n    const startRound = () => {\n        if (timeType === 'time') {\n            setTime(hour.diff(moment(), 'seconds'));\n        }\n\n        setCounter(true);\n    };\n\n    const setNewTurn = (value, index) => {\n        let newTurns = [...turns];\n\n        newTurns[index] = value;\n\n        setTurns(newTurns);\n    };\n\n    const addTurn = () => {\n        let newTurns = [...turns];\n\n        newTurns.push('');\n\n        setTurns(newTurns);\n    };\n\n    const removeItem = (index) => {\n        let newTurns = [...turns];\n\n        newTurns.splice(index, 1);\n\n        setTurns(newTurns);\n    };\n\n    const addMany = (number) => {\n        let newTurns = [...turns];\n\n        if (turns.length > number) {\n            newTurns = newTurns.slice(0, number);\n        } else if (turns.length < number) {\n            for (let i = 0; i < number - turns.length; i++) {\n                newTurns.push('');\n            }\n        }\n\n        setTurns(newTurns);\n    };\n\n    const renderPage = () => {\n        let contentToRender = null;\n\n        if (!counter) {\n            contentToRender = (\n                <SetUpPage\n                    setTime={setTime}\n                    handleNewTime={handleNewTime}\n                    setTimeType={setTimeType}\n                    startRound={startRound}\n                    setNewTurn={setNewTurn}\n                    addTurn={addTurn}\n                    removeItem={removeItem}\n                    turns={turns}\n                    addMany={addMany}\n                />\n            );\n        } else if (!timeFinished) {\n            contentToRender = (\n                <CounterPage\n                    totalTime={time}\n                    turnsCount={turns.length}\n                    backToSetup={()=>setCounter(false)}\n                    turns={turns}\n                    setTimeFinished={() => {setTimeFinished(true)}}\n                    setLastTurn={(last) => {setLastTurn(last)}}\n                />\n            );\n        } else {\n            contentToRender = (\n                <FinishPage turns={turns} lastTurn={lastTurn} />\n            );\n        }\n\n        return contentToRender;\n    };\n\n    return (\n        <div className=\"App\">\n            {renderPage()}\n            <AppFooter />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}